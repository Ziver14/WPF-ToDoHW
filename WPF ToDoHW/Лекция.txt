Стиль - это коллекция значений свойств, которые могут применяться к элементу. Система стилей  WPF играет ту же роль,
которую играет стандарт каскадных таблиц стилей(CSS) в HTML-разметке.

Ключевые свойства, необходимые для создания стилей:
- Setters - коллекция обьектов, которые устанавливают значения для свойств и присоединяют обработчики событий автоматически.
- Triggers - коллекция обьектов, которые позволяют автоматически изменять настройки стиля. Настройки стиля могут модифицироваться,
например, при изменении значения какого -то другого свойства или при поступлении какого -нибудь события.
- Resource - коллекция ресурсов, которые должны использоваться со стилями. Например, может понадобиться использовать единственный обьектдля установки нескольких свойств.
В таком случае более эффективно создать обьект как ресурс и затем использовать этот ресурс в обьекте Setter.
- BasedOn - свойство, которое позволяет создавать более специализированный стиль, наследующий (и дополнительно переопределяющий) параметры другого стиля.
- TargetType - свойство, которое идентифицирует тип элемента, к которому применяется данный стиль. Это свойство позволяет создавать обьекты Setter, влияющие только на определенные элементы.

Обьекты Setter имеют два свойства:
- Property - указывает на свойство, к которому будет применяться данный сеттер
- Value - устанавливает значение.

=================================Triggers============================================


Тригеры связываютсясо стилями через коллекцию Style.Triggers
Каждый стиль может иметь любое колличество триггеров.
Виды тригеров:
Trigger - простейшая форма тригера. Он следит за изменением в свойстве зависимости и затем использует средство установки для изменения стиля
MultiTigger - поддерживает проверку множесмтво условий. Этот тригер вступает в действие,только если удовлетворенны все заданные условия
DataTrigger- работает с привязкой данных.Он следит за изменением в любых связанных данных.
MultiDataTrigger- объеденяет множество триггеров данных
EventTrigger - Применяет анимацию, когда возникает соответсвующее событие

======================================================================================

Работа с файловой системой
Методы класса File
Copy(исходный путь файла, финальный путь файла) - копирует файл в новое место. Если файл с таким именем уже существует в конечной директории, то вызывает иискючение
Create(путь к файлу) - создает файл. Если файл с таким названием уже существует, то перезаписывает его.
Delete(путь к файлу) - удаляет файл.
Move(исходный путь файла, финальный путь файла) - перемещает файл в новое место
Exist(путь к файлу) - определяет существует ли указанный файл
Close() - закрывает поток, который открывается при использовании болшинства методов для работы с файлами. Необходимо вызывать данный метод для высвобождения процессорного времени
и завершения работы с файлом
AppendedAllLines(путь к файлу,список строк) - добавляет в фйл в набор строк=, если файл не существует, то он создается
AppendAllText(путь к файлу, строка для записей) - добавляет в файл строку, если файл не существует то онг создается
string[] ReadAllLines (путь к файлу) - считывает содержимое текстого файла в массив строк
string ReadAllText(путь к файлу) - считывает содержимое текстого файла в строку
void WriteAllLines(путь к файлу, массив строк) - записывает массив строк в текстовый файл, если файл не существует,  то он создается, если существует, то перезаписывается.
WriteAllText(путь к файлу, срока для записи) - записывает строку в текстовый файл, если файл не существует,  то он создается, если существует, то перезаписывается.
Directory.GetCurrentDirectory() - позволяет получить текущую директорию положения.
System.IO.Path.Combine(строка 1, ... , строка 4) - комбинирует от двух до четырех строк в виде пути к файлу.

Список основных свойств  SaveFileDialog
DefaultDirectory - устанавливает каталог, который будет открыт в диалоговом окне
FileName - хранит или устанавливает строку с полным путем до выбраного файла(в том числе название и расширение)
Filter - устанавливает возможные расширения файлов в диалоговом окне. Пример "Normal text file(*txt).txt"
первая часть до вертикальной черты определяет заголовок фильтра, а после расширение, которое требуется отоброжать.
Если требуется более одного фильтра, то ставиться еще одна вертикальная черта
OverwritePromt - устанавливает, будет ли выводиться предупреждение о перезаписи существующего файла. ПО умолчанию true.
SaveFileDialog - содержит название созданого файла
Title - устанавливае заголовок диалогового окна.

Работа с Json

Основные методы:
string JsonSerialized.Serialize(объект сериализации) - для формиирования строки в формате Json
T JsonSerialized.Deserialize<T>(строка в формате Json) - для преобразования строкеи в формата Json  в тип T.
Здесть важно уточнить, что для десериализации нужно, чтобы у класса T был объъявлен пустой конструкторa




